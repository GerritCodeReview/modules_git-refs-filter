{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c93abb5f_90b76570",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-15T00:15:57Z",
      "side": 1,
      "message": "@Matthias have you tried this libModule? It hides all closed changes and \u0027/meta\u0027 refs, reducing massively the amount of advertised refs and therefore all the associated operations.",
      "revId": "4595b0a166b041f79ab718c3e00225f64da06579",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be60a63a_f107704a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2021-09-15T06:55:39Z",
      "side": 1,
      "message": "In which scenario do you think this would be beneficial ?\nWouldn\u0027t it be better to cleanup corrupt refs ?",
      "parentUuid": "c93abb5f_90b76570",
      "revId": "4595b0a166b041f79ab718c3e00225f64da06579",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c47de039_dc8ef80c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-15T07:29:35Z",
      "side": 1,
      "message": "The /meta refs aren’t corrupted and they have no value in a mirror used for builds. Also abandoned changes or cache-automerge refs aren’t useful.\n\ncutting the number of refs advertised reduces significantly the search-for-reuse phase as well.\n\nremoving those refs isn’t a solution as you would need them anyway for having a working Gerrit server.",
      "parentUuid": "be60a63a_f107704a",
      "revId": "4595b0a166b041f79ab718c3e00225f64da06579",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "512648f8_7843610e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2021-09-15T07:49:44Z",
      "side": 1,
      "message": "Ok, so this is meant to be used in replica servers ?\nDo you have numbers (statistics, performance impact) from usage under real-world workload ?\n\nWith fetch using protocol v2 the client dynamically controls which refs it\u0027s interested in using ls-refs [1].\n\nThe commit message talks about \"refs not associated to any change possibly because of corruption\". Shouldn\u0027t those be cleaned up ?\n\n[1] https://git-scm.com/docs/protocol-v2/2.23.0#_ls_refs",
      "parentUuid": "c47de039_dc8ef80c",
      "revId": "4595b0a166b041f79ab718c3e00225f64da06579",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46c694e7_2432f25e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-15T07:57:39Z",
      "side": 1,
      "message": "\u003e Ok, so this is meant to be used in replica servers ?\n\u003e Do you have numbers (statistics, performance impact) from usage under real-world workload ?\n\nI should get some comparison today, with a large mono-repo. The clone --mirrror takes around 40 mins (the replicas have a local reference repo) and I\u0027ll compare today the improvement with this change.\n\n\u003e With fetch using protocol v2 the client dynamically controls which refs it\u0027s interested in using ls-refs [1].\n\nTrue, but I believe this isn\u0027t a protocol issue but more a Git server-side issue: when the client has tens of thousands of refs to request in the WANT phase, the server needs to look for the *best choice* of packfile for each one of them, causing billions of server-side computation cycles.\n\nOther than slowing down the clone, it also overloads the server, which is bad.\n\n\u003e The commit message talks about \"refs not associated to any change possibly because of corruption\". Shouldn\u0027t those be cleaned up ?\n\nAh, gotcha. In theory, yes, but in practice things are more complicated. Even old refs sometimes they need to be preserved for legal reasons.\n\n\u003e [1] https://git-scm.com/docs/protocol-v2/2.23.0#_ls_refs",
      "parentUuid": "512648f8_7843610e",
      "revId": "4595b0a166b041f79ab718c3e00225f64da06579",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0158fef1_5afecb12",
        "filename": "src/main/java/com/googlesource/gerrit/modules/gitrefsfilter/ForProjectWrapper.java",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-15T14:56:54Z",
      "side": 1,
      "message": "nit: perhaps this caveat should be added to the README, which at the moment only mentions \"closed change refs\".",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 102,
        "endChar": 94
      },
      "revId": "4595b0a166b041f79ab718c3e00225f64da06579",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0123c4ae_75b29327",
        "filename": "src/main/java/com/googlesource/gerrit/modules/gitrefsfilter/ForProjectWrapper.java",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2021-09-15T10:09:07Z",
      "side": 1,
      "message": "Might be worth adding a test for this? Should be easy, something like:\n\n   createChange();\n   ... push random ref to repository ...\n   assertThat(getRefs(cloneProjectChangesRefs(user))).equals(1);",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 104,
        "endChar": 5
      },
      "revId": "4595b0a166b041f79ab718c3e00225f64da06579",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}