{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6b05c4e_325c39ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-15T14:49:15Z",
      "side": 1,
      "message": "Does this mean that when git-refs-filter is used, the \"change_notes\" cache would always ending up being populated with entire history of (opened and closed) changes?\n\nI think this is acceptable, but perhaps it would be worth noting (somewhere) that this is the case and that by using this lib module, change_notes cache might end-up being populated with an unusually high number of entries.\n\nSome installations might have set hard limits in how much this cache can grow, and thus using this lib module might lead to a higher number of evictions and memory (or disk) usage.",
      "range": {
        "startLine": 14,
        "startChar": 36,
        "endLine": 15,
        "endChar": 46
      },
      "revId": "ffdf9f1afe6faef5c0ecc603bf910d21a619a9ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55d41577_4cd16fbd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-22T22:02:29Z",
      "side": 1,
      "message": "\u003e Does this mean that when git-refs-filter is used, the \"change_notes\" cache would always ending up being populated with entire history of (opened and closed) changes?\n\nThat would happen anyway, regardless of this plugin. It is actually a good thing because the cache would be then fully populated and speedup access to change notes.\n\n\u003e I think this is acceptable, but perhaps it would be worth noting (somewhere) that this is the case and that by using this lib module, change_notes cache might end-up being populated with an unusually high number of entries.\n\nWhy \"unusually\"? The change_notes should be always full for being effective.\n\n\u003e Some installations might have set hard limits in how much this cache can grow, and thus using this lib module might lead to a higher number of evictions and memory (or disk) usage.\n\nIf you have 100k changes and allocate less than 100k entries in the persistent cache, then you have a problem, yes. That is regardless of this plugin: a cache should be big enough to hold the full population of entries, otherwise it would start evicting.",
      "parentUuid": "c6b05c4e_325c39ae",
      "range": {
        "startLine": 14,
        "startChar": 36,
        "endLine": 15,
        "endChar": 46
      },
      "revId": "ffdf9f1afe6faef5c0ecc603bf910d21a619a9ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6904f708_4fc0219e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-23T07:52:15Z",
      "side": 1,
      "message": "\u003e \u003e Does this mean that when git-refs-filter is used, the \"change_notes\" cache would always ending up being populated with entire history of (opened and closed) changes?\n\u003e \n\u003e That would happen anyway, regardless of this plugin. It is actually a good thing because the cache would be then fully populated and speedup access to change notes.\n\nWhat\u0027s the value of keeping un-accessed, closed changes in the cache? by definition they are not accessed, so they should not be cached.\n\n\u003e \n\u003e \u003e I think this is acceptable, but perhaps it would be worth noting (somewhere) that this is the case and that by using this lib module, change_notes cache might end-up being populated with an unusually high number of entries.\n\u003e \n\u003e Why \"unusually\"? The change_notes should be always full for being effective.\n\n\"Unusually\" because usually un-accessed changes would not be loaded in the cache.\n\n\u003e \n\u003e \u003e Some installations might have set hard limits in how much this cache can grow, and thus using this lib module might lead to a higher number of evictions and memory (or disk) usage.\n\u003e \n\u003e If you have 100k changes and allocate less than 100k entries in the persistent cache, then you have a problem, yes. That is regardless of this plugin: a cache should be big enough to hold the full population of entries, otherwise it would start evicting.\n\nWhat\u0027s the point of keepinh in cache a change_note entry for a change that was closed 3 years ago and it was never been accessed since?\n\nIf you have 100k changes and 90k of them are not being accessed, I think you only need a cache big enough to contain 10k, not 100k, right?\n\nThe point I was making is that this approach will populate the cache with *all* changes, also changes that would have not otherwise been opened in years and thus (I think rightfully) not participating in populating the cache.\n\nInstalling this plugin will change this behavior and I was thinking it was worth mentioning.\n\nNot a big deal if you think otherwise, resolving.",
      "parentUuid": "55d41577_4cd16fbd",
      "range": {
        "startLine": 14,
        "startChar": 36,
        "endLine": 15,
        "endChar": 46
      },
      "revId": "ffdf9f1afe6faef5c0ecc603bf910d21a619a9ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7506358b_deaef494",
        "filename": "src/main/java/com/googlesource/gerrit/modules/gitrefsfilter/ForProjectWrapper.java",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-15T14:49:15Z",
      "side": 1,
      "message": "Do you think that using parallel streams lead to worse performance in this case?\n\nThe overhead of managing different threads and results might be more expensive than doing the actual sequential work, but if the goal of this change is performance and resources, perhaps it is something that should be benchmarked and assessed (even as a follow up change).",
      "range": {
        "startLine": 74,
        "startChar": 54,
        "endLine": 74,
        "endChar": 62
      },
      "revId": "ffdf9f1afe6faef5c0ecc603bf910d21a619a9ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40204dc0_fe5e9e24",
        "filename": "src/main/java/com/googlesource/gerrit/modules/gitrefsfilter/ForProjectWrapper.java",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-15T21:49:32Z",
      "side": 1,
      "message": "Let me try with parallelStream() and come back with results :-)",
      "parentUuid": "7506358b_deaef494",
      "range": {
        "startLine": 74,
        "startChar": 54,
        "endLine": 74,
        "endChar": 62
      },
      "revId": "ffdf9f1afe6faef5c0ecc603bf910d21a619a9ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "970ca0f5_de6b5ec4",
        "filename": "src/main/java/com/googlesource/gerrit/modules/gitrefsfilter/ForProjectWrapper.java",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-22T22:02:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40204dc0_fe5e9e24",
      "range": {
        "startLine": 74,
        "startChar": 54,
        "endLine": 74,
        "endChar": 62
      },
      "revId": "ffdf9f1afe6faef5c0ecc603bf910d21a619a9ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}